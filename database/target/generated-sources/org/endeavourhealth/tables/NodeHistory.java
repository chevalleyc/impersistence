/*
 * This file is generated by jOOQ.
 */
package org.endeavourhealth.tables;


import java.sql.Timestamp;
import java.util.UUID;
import java.util.function.Function;

import org.endeavourhealth.Quadstore;
import org.endeavourhealth.tables.records.NodeHistoryRecord;
import org.endeavourhealth.udt.records.CodedTextRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodeHistory extends TableImpl<NodeHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>quadstore.node_history</code>
     */
    public static final NodeHistory NODE_HISTORY = new NodeHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodeHistoryRecord> getRecordType() {
        return NodeHistoryRecord.class;
    }

    /**
     * The column <code>quadstore.node_history.id</code>.
     */
    public final TableField<NodeHistoryRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.node_history.person_id</code>.
     */
    public final TableField<NodeHistoryRecord, UUID> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>quadstore.node_history.organisation_id</code>.
     */
    public final TableField<NodeHistoryRecord, UUID> ORGANISATION_ID = createField(DSL.name("organisation_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.node_history.iri</code>.
     */
    public final TableField<NodeHistoryRecord, String> IRI = createField(DSL.name("iri"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>quadstore.node_history.name</code>.
     */
    public final TableField<NodeHistoryRecord, CodedTextRecord> NAME = createField(DSL.name("name"), org.endeavourhealth.udt.CodedText.CODED_TEXT.getDataType(), this, "");

    /**
     * The column <code>quadstore.node_history.effective_date</code>.
     */
    public final TableField<NodeHistoryRecord, Timestamp> EFFECTIVE_DATE = createField(DSL.name("effective_date"), SQLDataType.TIMESTAMP(6), this, "");

    /**
     * The column <code>quadstore.node_history.type</code>.
     */
    public final TableField<NodeHistoryRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>quadstore.node_history.feeder_audit</code>.
     */
    public final TableField<NodeHistoryRecord, JSONB> FEEDER_AUDIT = createField(DSL.name("feeder_audit"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>quadstore.node_history.properties</code>.
     */
    public final TableField<NodeHistoryRecord, JSONB> PROPERTIES = createField(DSL.name("properties"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>quadstore.node_history.created_ts</code>.
     */
    public final TableField<NodeHistoryRecord, Timestamp> CREATED_TS = createField(DSL.name("created_ts"), SQLDataType.TIMESTAMP(6).nullable(false), this, "");

    private NodeHistory(Name alias, Table<NodeHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private NodeHistory(Name alias, Table<NodeHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>quadstore.node_history</code> table reference
     */
    public NodeHistory(String alias) {
        this(DSL.name(alias), NODE_HISTORY);
    }

    /**
     * Create an aliased <code>quadstore.node_history</code> table reference
     */
    public NodeHistory(Name alias) {
        this(alias, NODE_HISTORY);
    }

    /**
     * Create a <code>quadstore.node_history</code> table reference
     */
    public NodeHistory() {
        this(DSL.name("node_history"), null);
    }

    public <O extends Record> NodeHistory(Table<O> child, ForeignKey<O, NodeHistoryRecord> key) {
        super(child, key, NODE_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Quadstore.QUADSTORE;
    }

    @Override
    public NodeHistory as(String alias) {
        return new NodeHistory(DSL.name(alias), this);
    }

    @Override
    public NodeHistory as(Name alias) {
        return new NodeHistory(alias, this);
    }

    @Override
    public NodeHistory as(Table<?> alias) {
        return new NodeHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NodeHistory rename(String name) {
        return new NodeHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodeHistory rename(Name name) {
        return new NodeHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodeHistory rename(Table<?> name) {
        return new NodeHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<UUID, UUID, UUID, String, CodedTextRecord, Timestamp, Integer, JSONB, JSONB, Timestamp> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super UUID, ? super UUID, ? super UUID, ? super String, ? super CodedTextRecord, ? super Timestamp, ? super Integer, ? super JSONB, ? super JSONB, ? super Timestamp, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super UUID, ? super UUID, ? super UUID, ? super String, ? super CodedTextRecord, ? super Timestamp, ? super Integer, ? super JSONB, ? super JSONB, ? super Timestamp, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
