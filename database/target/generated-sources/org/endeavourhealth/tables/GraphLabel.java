/*
 * This file is generated by jOOQ.
 */
package org.endeavourhealth.tables;


import java.sql.Timestamp;
import java.util.UUID;
import java.util.function.Function;

import org.endeavourhealth.Keys;
import org.endeavourhealth.Quadstore;
import org.endeavourhealth.tables.records.GraphLabelRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GraphLabel extends TableImpl<GraphLabelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>quadstore.graph_label</code>
     */
    public static final GraphLabel GRAPH_LABEL = new GraphLabel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GraphLabelRecord> getRecordType() {
        return GraphLabelRecord.class;
    }

    /**
     * The column <code>quadstore.graph_label.id</code>.
     */
    public final TableField<GraphLabelRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.graph_label.name</code>.
     */
    public final TableField<GraphLabelRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>quadstore.graph_label.created_ts</code>.
     */
    public final TableField<GraphLabelRecord, Timestamp> CREATED_TS = createField(DSL.name("created_ts"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private GraphLabel(Name alias, Table<GraphLabelRecord> aliased) {
        this(alias, aliased, null);
    }

    private GraphLabel(Name alias, Table<GraphLabelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>quadstore.graph_label</code> table reference
     */
    public GraphLabel(String alias) {
        this(DSL.name(alias), GRAPH_LABEL);
    }

    /**
     * Create an aliased <code>quadstore.graph_label</code> table reference
     */
    public GraphLabel(Name alias) {
        this(alias, GRAPH_LABEL);
    }

    /**
     * Create a <code>quadstore.graph_label</code> table reference
     */
    public GraphLabel() {
        this(DSL.name("graph_label"), null);
    }

    public <O extends Record> GraphLabel(Table<O> child, ForeignKey<O, GraphLabelRecord> key) {
        super(child, key, GRAPH_LABEL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Quadstore.QUADSTORE;
    }

    @Override
    public UniqueKey<GraphLabelRecord> getPrimaryKey() {
        return Keys.GRAPH_LABEL_PKEY;
    }

    @Override
    public GraphLabel as(String alias) {
        return new GraphLabel(DSL.name(alias), this);
    }

    @Override
    public GraphLabel as(Name alias) {
        return new GraphLabel(alias, this);
    }

    @Override
    public GraphLabel as(Table<?> alias) {
        return new GraphLabel(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GraphLabel rename(String name) {
        return new GraphLabel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GraphLabel rename(Name name) {
        return new GraphLabel(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GraphLabel rename(Table<?> name) {
        return new GraphLabel(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, Timestamp> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super String, ? super Timestamp, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super String, ? super Timestamp, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
