/*
 * This file is generated by jOOQ.
 */
package org.endeavourhealth.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.endeavourhealth.Indexes;
import org.endeavourhealth.Keys;
import org.endeavourhealth.Quadstore;
import org.endeavourhealth.tables.records.QuadRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Quad extends TableImpl<QuadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>quadstore.quad</code>
     */
    public static final Quad QUAD = new Quad();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuadRecord> getRecordType() {
        return QuadRecord.class;
    }

    /**
     * The column <code>quadstore.quad.id</code>.
     */
    public final TableField<QuadRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.quad.subject_id</code>.
     */
    public final TableField<QuadRecord, UUID> SUBJECT_ID = createField(DSL.name("subject_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.quad.predicate_id</code>.
     */
    public final TableField<QuadRecord, UUID> PREDICATE_ID = createField(DSL.name("predicate_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.quad.object_id</code>.
     */
    public final TableField<QuadRecord, UUID> OBJECT_ID = createField(DSL.name("object_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.quad.label_id</code>.
     */
    public final TableField<QuadRecord, UUID> LABEL_ID = createField(DSL.name("label_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>quadstore.quad.created_ts</code>.
     */
    public final TableField<QuadRecord, Timestamp> CREATED_TS = createField(DSL.name("created_ts"), SQLDataType.TIMESTAMP(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.TIMESTAMP)), this, "");

    private Quad(Name alias, Table<QuadRecord> aliased) {
        this(alias, aliased, null);
    }

    private Quad(Name alias, Table<QuadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>quadstore.quad</code> table reference
     */
    public Quad(String alias) {
        this(DSL.name(alias), QUAD);
    }

    /**
     * Create an aliased <code>quadstore.quad</code> table reference
     */
    public Quad(Name alias) {
        this(alias, QUAD);
    }

    /**
     * Create a <code>quadstore.quad</code> table reference
     */
    public Quad() {
        this(DSL.name("quad"), null);
    }

    public <O extends Record> Quad(Table<O> child, ForeignKey<O, QuadRecord> key) {
        super(child, key, QUAD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Quadstore.QUADSTORE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LABELED_QUAD_UNIQUE, Indexes.QUAD_UNIQUE);
    }

    @Override
    public UniqueKey<QuadRecord> getPrimaryKey() {
        return Keys.QUAD_PKEY;
    }

    @Override
    public List<ForeignKey<QuadRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QUAD__SUBJECT_ID_FK, Keys.QUAD__PREDICATE_ID_FK, Keys.QUAD__OBJECT_ID_FK, Keys.QUAD__LABEL_GRAPH_ID_FK, Keys.QUAD__LABEL_ID_FK);
    }

    private transient Node _subjectIdFk;
    private transient Node _predicateIdFk;
    private transient Node _objectIdFk;
    private transient GraphLabel _graphLabel;
    private transient Node _labelIdFk;

    /**
     * Get the implicit join path to the <code>quadstore.node</code> table, via
     * the <code>subject_id_fk</code> key.
     */
    public Node subjectIdFk() {
        if (_subjectIdFk == null)
            _subjectIdFk = new Node(this, Keys.QUAD__SUBJECT_ID_FK);

        return _subjectIdFk;
    }

    /**
     * Get the implicit join path to the <code>quadstore.node</code> table, via
     * the <code>predicate_id_fk</code> key.
     */
    public Node predicateIdFk() {
        if (_predicateIdFk == null)
            _predicateIdFk = new Node(this, Keys.QUAD__PREDICATE_ID_FK);

        return _predicateIdFk;
    }

    /**
     * Get the implicit join path to the <code>quadstore.node</code> table, via
     * the <code>object_id_fk</code> key.
     */
    public Node objectIdFk() {
        if (_objectIdFk == null)
            _objectIdFk = new Node(this, Keys.QUAD__OBJECT_ID_FK);

        return _objectIdFk;
    }

    /**
     * Get the implicit join path to the <code>quadstore.graph_label</code>
     * table.
     */
    public GraphLabel graphLabel() {
        if (_graphLabel == null)
            _graphLabel = new GraphLabel(this, Keys.QUAD__LABEL_GRAPH_ID_FK);

        return _graphLabel;
    }

    /**
     * Get the implicit join path to the <code>quadstore.node</code> table, via
     * the <code>label_id_fk</code> key.
     */
    public Node labelIdFk() {
        if (_labelIdFk == null)
            _labelIdFk = new Node(this, Keys.QUAD__LABEL_ID_FK);

        return _labelIdFk;
    }

    @Override
    public Quad as(String alias) {
        return new Quad(DSL.name(alias), this);
    }

    @Override
    public Quad as(Name alias) {
        return new Quad(alias, this);
    }

    @Override
    public Quad as(Table<?> alias) {
        return new Quad(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Quad rename(String name) {
        return new Quad(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quad rename(Name name) {
        return new Quad(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Quad rename(Table<?> name) {
        return new Quad(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, UUID, UUID, UUID, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super Timestamp, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super Timestamp, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
