/*
 * This file is generated by jOOQ.
 */
package org.endeavourhealth.tables;


import java.sql.Timestamp;
import java.util.UUID;
import java.util.function.Function;

import org.endeavourhealth.Quadstore;
import org.endeavourhealth.tables.records.QuadHistoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuadHistory extends TableImpl<QuadHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>quadstore.quad_history</code>
     */
    public static final QuadHistory QUAD_HISTORY = new QuadHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuadHistoryRecord> getRecordType() {
        return QuadHistoryRecord.class;
    }

    /**
     * The column <code>quadstore.quad_history.id</code>.
     */
    public final TableField<QuadHistoryRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.quad_history.subject_id</code>.
     */
    public final TableField<QuadHistoryRecord, UUID> SUBJECT_ID = createField(DSL.name("subject_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.quad_history.predicate_id</code>.
     */
    public final TableField<QuadHistoryRecord, UUID> PREDICATE_ID = createField(DSL.name("predicate_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.quad_history.object_id</code>.
     */
    public final TableField<QuadHistoryRecord, UUID> OBJECT_ID = createField(DSL.name("object_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>quadstore.quad_history.label_id</code>.
     */
    public final TableField<QuadHistoryRecord, UUID> LABEL_ID = createField(DSL.name("label_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>quadstore.quad_history.created_ts</code>.
     */
    public final TableField<QuadHistoryRecord, Timestamp> CREATED_TS = createField(DSL.name("created_ts"), SQLDataType.TIMESTAMP(6).nullable(false), this, "");

    private QuadHistory(Name alias, Table<QuadHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuadHistory(Name alias, Table<QuadHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>quadstore.quad_history</code> table reference
     */
    public QuadHistory(String alias) {
        this(DSL.name(alias), QUAD_HISTORY);
    }

    /**
     * Create an aliased <code>quadstore.quad_history</code> table reference
     */
    public QuadHistory(Name alias) {
        this(alias, QUAD_HISTORY);
    }

    /**
     * Create a <code>quadstore.quad_history</code> table reference
     */
    public QuadHistory() {
        this(DSL.name("quad_history"), null);
    }

    public <O extends Record> QuadHistory(Table<O> child, ForeignKey<O, QuadHistoryRecord> key) {
        super(child, key, QUAD_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Quadstore.QUADSTORE;
    }

    @Override
    public QuadHistory as(String alias) {
        return new QuadHistory(DSL.name(alias), this);
    }

    @Override
    public QuadHistory as(Name alias) {
        return new QuadHistory(alias, this);
    }

    @Override
    public QuadHistory as(Table<?> alias) {
        return new QuadHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuadHistory rename(String name) {
        return new QuadHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuadHistory rename(Name name) {
        return new QuadHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuadHistory rename(Table<?> name) {
        return new QuadHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, UUID, UUID, UUID, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super Timestamp, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super UUID, ? super Timestamp, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
