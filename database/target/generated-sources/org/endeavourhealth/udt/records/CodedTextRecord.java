/*
 * This file is generated by jOOQ.
 */
package org.endeavourhealth.udt.records;


import org.endeavourhealth.udt.CodedText;
import org.jooq.Field;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UDTRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodedTextRecord extends UDTRecordImpl<CodedTextRecord> implements Record6<String, CodePhraseRecord, String, CodePhraseRecord, CodePhraseRecord, String[]> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>quadstore.coded_text.value</code>.
     */
    public void setValue(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>quadstore.coded_text.value</code>.
     */
    public String getValue() {
        return (String) get(0);
    }

    /**
     * Setter for <code>quadstore.coded_text.defining_code</code>.
     */
    public void setDefiningCode(CodePhraseRecord value) {
        set(1, value);
    }

    /**
     * Getter for <code>quadstore.coded_text.defining_code</code>.
     */
    public CodePhraseRecord getDefiningCode() {
        return (CodePhraseRecord) get(1);
    }

    /**
     * Setter for <code>quadstore.coded_text.formatting</code>.
     */
    public void setFormatting(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>quadstore.coded_text.formatting</code>.
     */
    public String getFormatting() {
        return (String) get(2);
    }

    /**
     * Setter for <code>quadstore.coded_text.language</code>.
     */
    public void setLanguage(CodePhraseRecord value) {
        set(3, value);
    }

    /**
     * Getter for <code>quadstore.coded_text.language</code>.
     */
    public CodePhraseRecord getLanguage() {
        return (CodePhraseRecord) get(3);
    }

    /**
     * Setter for <code>quadstore.coded_text.encoding</code>.
     */
    public void setEncoding(CodePhraseRecord value) {
        set(4, value);
    }

    /**
     * Getter for <code>quadstore.coded_text.encoding</code>.
     */
    public CodePhraseRecord getEncoding() {
        return (CodePhraseRecord) get(4);
    }

    /**
     * Setter for <code>quadstore.coded_text.term_mapping</code>.
     */
    public void setTermMapping(String[] value) {
        set(5, value);
    }

    /**
     * Getter for <code>quadstore.coded_text.term_mapping</code>.
     */
    public String[] getTermMapping() {
        return (String[]) get(5);
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, CodePhraseRecord, String, CodePhraseRecord, CodePhraseRecord, String[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<String, CodePhraseRecord, String, CodePhraseRecord, CodePhraseRecord, String[]> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return CodedText.VALUE;
    }

    @Override
    public Field<CodePhraseRecord> field2() {
        return CodedText.DEFINING_CODE;
    }

    @Override
    public Field<String> field3() {
        return CodedText.FORMATTING;
    }

    @Override
    public Field<CodePhraseRecord> field4() {
        return CodedText.LANGUAGE;
    }

    @Override
    public Field<CodePhraseRecord> field5() {
        return CodedText.ENCODING;
    }

    @Override
    public Field<String[]> field6() {
        return CodedText.TERM_MAPPING;
    }

    @Override
    public String component1() {
        return getValue();
    }

    @Override
    public CodePhraseRecord component2() {
        return getDefiningCode();
    }

    @Override
    public String component3() {
        return getFormatting();
    }

    @Override
    public CodePhraseRecord component4() {
        return getLanguage();
    }

    @Override
    public CodePhraseRecord component5() {
        return getEncoding();
    }

    @Override
    public String[] component6() {
        return getTermMapping();
    }

    @Override
    public String value1() {
        return getValue();
    }

    @Override
    public CodePhraseRecord value2() {
        return getDefiningCode();
    }

    @Override
    public String value3() {
        return getFormatting();
    }

    @Override
    public CodePhraseRecord value4() {
        return getLanguage();
    }

    @Override
    public CodePhraseRecord value5() {
        return getEncoding();
    }

    @Override
    public String[] value6() {
        return getTermMapping();
    }

    @Override
    public CodedTextRecord value1(String value) {
        setValue(value);
        return this;
    }

    @Override
    public CodedTextRecord value2(CodePhraseRecord value) {
        setDefiningCode(value);
        return this;
    }

    @Override
    public CodedTextRecord value3(String value) {
        setFormatting(value);
        return this;
    }

    @Override
    public CodedTextRecord value4(CodePhraseRecord value) {
        setLanguage(value);
        return this;
    }

    @Override
    public CodedTextRecord value5(CodePhraseRecord value) {
        setEncoding(value);
        return this;
    }

    @Override
    public CodedTextRecord value6(String[] value) {
        setTermMapping(value);
        return this;
    }

    @Override
    public CodedTextRecord values(String value1, CodePhraseRecord value2, String value3, CodePhraseRecord value4, CodePhraseRecord value5, String[] value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CodedTextRecord
     */
    public CodedTextRecord() {
        super(CodedText.CODED_TEXT);
    }

    /**
     * Create a detached, initialised CodedTextRecord
     */
    public CodedTextRecord(String value, CodePhraseRecord definingCode, String formatting, CodePhraseRecord language, CodePhraseRecord encoding, String[] termMapping) {
        super(CodedText.CODED_TEXT);

        setValue(value);
        setDefiningCode(definingCode);
        setFormatting(formatting);
        setLanguage(language);
        setEncoding(encoding);
        setTermMapping(termMapping);
    }
}
